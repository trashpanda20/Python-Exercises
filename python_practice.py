# -*- coding: utf-8 -*-
"""python practice

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hZqczX66onXy0FvdwuO3EPQErwI4rn5H
"""

#Review exercises
#Create a string and print its length using len()
string = "Hello"
print(len(string))
#5

#print the string zing by using slice notation to specify the correct range of characters in the string bazinga
bazinga = "bazinga"
print(bazinga[2:6])
#zing

#user input
prompt= "Hey, what's up? "
user_input = input(prompt)
print("you said: " + user_input)

word = "hello"
word * 3
#'hellohellohello'

#Create a string containing an integer, then convert that string into
#an actual integer object using int(). Test that your new object is
# number by multiplying it by another number and displaying the
#result.

string = "5"
num = int(string)
print(num*2)

#3Write a program that uses input() twice to get two numbers from
#the user, multiplies the numbers together, and displays the result.
#If the user enters 2 and 4, then your program should print the
#following text:

prompt_1 = "Enter a number"
prompt_2 = "Enter another number"
user_1 = input(prompt_1)
user_2 = input(prompt_2)
num_1 = int(user_1)
num_2 = int(user_2)
product = num_1 * num_2
print("The product of " + str(num_1) + " and " + str(num_2) + " is " + str(product))

"""# Lists and Tuples.
lists = [1,2,3,4]
# modify:
lists[1] = "two"

1.   .append() does it to add on
2.   .remove() removes the element

# Tuples
not changable.
uses () instead of []



"""

#create a list of fruits to add two more then remove one,
fruits = ["apples", "kiwi"]
print(fruits)
fruits.append("strawberry")
print(fruits)
fruits.append("oranges")
print(fruits)
fruits.remove("kiwi")
#fruits.pop() removes the last one.
print(fruits)
fruits.pop()
print(fruits)

#create a tuple rom 1-5. What error do you get when trying to modify?
tuple = (1, 2, 3, 4, 5)
#tuple.remove(1)
#'tuple' object has no attribute 'remove'

"""# Dictonaries

"""

#Creating a dictionary
empty = {}
person= {"name" : "John", "age" : 30}
print(person['name'])
person['age'] = 25
print(person)
del person['age']
print(person)
#if it doesnt exist, use get()
print(person.get('age'))

"""# Sets"""

sets.add(1)
sets.add(2)
sets.add(3)
print(sets)
sets.remove(2)
print(sets)

#dictonary book and update teh year
book ={"Title": "How to Kill a Mockingbird", "Author" : "Harper Lee", "year published" : "1960"}
print(book)
book['year published'] = "2024"
print(book)

#create a set, and try adding a duplicate.
my_sets = {"Godzilla"}
my_sets.add("Fast and Furious")
my_sets.add("Barbie")
my_sets.add("Big Hero 6")
print(my_sets)
my_sets.add("Barbie")
print(my_sets)

#nested dictionary
nested = {
    "compsci" : {
        "cyber" : ["cy201"],
        "infosys" : ["is448"],
        "compscience" : ["cs101"]
    }
}

print(nested["compsci"]["cyber"])

#nested list for tic tac toe
tic = [["","",""],["","",""],["","",""]]

#create nest dict holds stiudents grades for multiple subject and each with grading components
student={
    "grades" : {
        "math" : {
            "assignment" : ["96%"],
            "exams" : ["50%"],
            "attendance" : ["30%"]
        },
        "english" : {
            "assignment" : ["20%"],
            "exams" : ["60%"],
            "attendance" : ["100%"]
        },
        "social" : {
            "assignment" : ["90%"],
            "exams" : ["80%"],
            "attendance" : ["70%"]
        }
    }
}
print(student["grades"])
print(student["grades"]["social"])
print(student["grades"]["social"]["exams"])

#list comprehensions create lists
squares = [x*x for x in range(5)]
print(squares)
#0*0, 1*1, 2*2, 3*3, 4*4

squares.insert(2, 2)
#inserts 2 at index 2
print(squares)

index = squares.index(4)
#.index returns the first occurance of an element in the list. Answer: 3
print(index)

count = squares.count(2)
#counts how many 2s there are
print(count)

#.sort sorts
#.reverse reverse the entire list

for key in student.keys():
  print(key)
print()
for value in student.values():
  print(value)
print()
for items in student.items():
  print(items)

"""#union
adds them together in a new set
#intersect
all the ones they share into a new set
#differnece
all the ones they dont share from the first set
#symmetric_difference
set containg both sets differences

#in or not in
checks whether is there or not
#max and min
returns min and max elements
#len
how many elements there are
#list to tuple
list[]...tuple(list)
#tuple to list
list(tuple)

Three C's of Control Structures: Choice, Cycle, and Control.


---


Conditional: if, elif, else.


---
Loops:

For i in range(x):

while count < 5 :

break = condition is met early

continue = skip interation

pass = do absolutel nothing
"""

#create my own conditional:

student_grade = 88

if student_grade > 80:
  print("excelling")
elif student_grade < 80 and student_grade > 60:
  print("passing")
else:
  print("failing")

#loop to calculae total of number up to 100
total = 0
for i in range (1, 101):
  total += i

print(total)

#while loop where you have to guess a number

number = 5
guess = None



while guess != number:
    guess = int(input("Enter a number 1-10:"))
    if guess < 5:
      print("Wrong. Try again. You're too low")
    elif guess == number:
      print("Yay! Correct.")
    else:
      print("Wrong. Try again. You're too high")

#Simple calculator
num1 = float(input("First number: "))
num2 = float(input("Second number: "))
operator = input("Enter an operator: ")
if operator == "+":
  result = num1 + num2
  print(str(num1) + " + " + str(num2) + " = " + str(result))

elif operator == "-":
  result = num1 - num2
  print(str(num1) + " - " + str(num2) + " = " + str(result))

elif operator == "*":
  result = num1 * num2
  print(str(num1) + " * " + str(num2) + " = " + str(result))

elif operator == "/":
  result = num1 / num2
  print(str(num1) + " / " + str(num2) + " = " + str(result))

else:
  print("Please enter an operator with no spaces around it.")

"""**For loops are used when number of iterations are known, and while loops are used when the number of iterations is unknown**"""

#write a for loop to total all teh umber from 1 to 100 in even
total = 0
for i in range (2,101,2):
  total += i
print(total)

#while loop to find the smallest power of 2 thats larger than 1000
power = 1

while power < 100 :
  power *= 2

print(power)

#nested for loop to create multi table of 1-10
#x/y
#---
#x/y
print("x * x | y")
print("---------")
for i in range (11):
  for j in range(11):
    product = i*j
    print(f"{i} * {j} | {product}")

"""Break : stops the loop
continue : skips an iteration
pass : used as a placeholder. runs af it isnt there
"""

#break: 1-100 but stops when 500 is reached
total = 0
for i in range (1,101):
  if total > 500:
    #i couldnt figure out why it wasnt stopping when it hit 500, and thats becasue it never hit 500. It hits 528. so it stops once it hits 528 now.
    break
  total+=i
  print(total)

#continue:prints all numer 1-20 but skips multiole of 5
for i in range (1,21):

  if i % 5:
    continue
  print(i)
#this makes only those divisible by 5
print()

for i in range (1,21):
  if i % 3 == 0:
    continue
  print(i)

#pass: counts 1-10 ut passes between 4-7
for i in range(1,11):
  if 4 <= i <=7:
    pass
  print(i)

list = [1,2,3]
for item in list:
  print(item)

print()
tuple=(1,2,3,4)
for item in tuple:
  print(item)

"""# functions"""

#reverse a string
def reverse(s):
  return s[::-1]

print(reverse("Howdy"))


#takes two numbers and returns total
def totals(num1, num2):
  s1 = int(num1)
  s2 = int(num2)
  total_of = s1 + s2
  return total_of

print("The total of 5 and 6 is:")

print(totals("5", "6"))

import builtins

#takes a lit and returns average
def this_list(numbers):
  first_step = builtins.sum(numbers)
  second_step = len(numbers)
  last = first_step/second_step
  return last

print(this_list([1,2,3,4,4,4,5]))

import math_operations

result = math_operations.add(6,2)
print(result)

"""# exceptioms
try and except

try:

    #some code

  except ZeroDivisionError:
      
      print(:Cant divde by zero")

catches the problem and send the code that it executes as lettign you know.


finally block is what has to be done whether there is an exception or not

rasieing your own exceptions:

    raise ValueError("Nothing below zero!")

    
"""

def division():
  try:
    num1 = int(input("Enter number: "))
    num2 = int(input("Enter another number:"))

    result = num1/num2
    print(f"The result is {result}")

  except ZeroDivisionError:
    print("Cannot divide by zero")

  except ValueError:
    print("Please enter a number")

division()

"""# ommon exceptions
ValueError: correct type, but inappropriate value

TypeError:operation or function is applied to an inappropriate type

IndexError: try to access an indexthat doesnt exist

KeyError: try to access a dictonary key hat doesnt exist

FileNotFoundError: trying to open a file att doesnt exist.
"""